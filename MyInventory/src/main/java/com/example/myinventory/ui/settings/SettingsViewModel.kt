package com.example.myinventory.ui.settings

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.myinventory.data.AppDatabase
import com.example.myinventory.data.models.Device
import com.example.myinventory.data.models.DeviceModel
import com.example.myinventory.data.models.DeviceType
import com.example.myinventory.data.models.Field
import com.example.myinventory.data.models.FieldType
import com.example.myinventory.data.models.Location
import com.example.myinventory.data.models.Rack
import com.example.myinventory.data.models.Site
import com.example.myinventory.data.models.Vendor
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch

class SettingsViewModel(
    private val db: AppDatabase
) : ViewModel() {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –Ω–∞–±–ª—é–¥–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    val sites = db.siteDao().getAll()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val locations = db.locationDao().getAll()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val vendors = db.vendorDao().getAll()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val deviceTypes = db.deviceTypeDao().getAll()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val deviceModels = db.deviceModelDao().getAll()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val racks = db.rackDao().getAll()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val fieldTypes = db.fieldTypeDao().getAll()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val devices = db.deviceDao().getAll()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())

    val fields = db.fieldDao().getAll()
        .stateIn(viewModelScope, SharingStarted.WhileSubscribed(5000), emptyList())


    // üî∏ –î–û–ë–ê–í–õ–ï–ù–ò–ï
    fun addSite(name: String) = viewModelScope.launch {
        db.siteDao().insert(Site(name = name))
    }

    fun addLocation(name: String, siteId: Int) = viewModelScope.launch {
        db.locationDao().insert(Location(name = name, siteId = siteId))
    }

    fun addVendor(name: String) = viewModelScope.launch {
        db.vendorDao().insert(Vendor(name = name))
    }

    fun addDeviceType(name: String, fieldTypeIdList: List<Int>) = viewModelScope.launch {
        db.deviceTypeDao().insert(DeviceType(name = name, fieldTypeIdList = fieldTypeIdList))
    }

    fun addDeviceModel(name: String, vendorId: Int, typeId: Int) = viewModelScope.launch {
        db.deviceModelDao().insert(DeviceModel(name = name, vendorId = vendorId, deviceTypeId = typeId))
    }

    fun addRack(name: String, locationId: Int) = viewModelScope.launch {
        db.rackDao().insert(Rack(name = name, locationId = locationId))
    }

    fun addFieldType(name: String, valueType: String) = viewModelScope.launch {
        db.fieldTypeDao().insert(FieldType(name = name, valueType = valueType))
    }

    fun addDevice(device: Device) = viewModelScope.launch {
        db.deviceDao().insert(device)
    }

    fun addField(fieldTypeId: Int, deviceId: Int, value: String = "") = viewModelScope.launch {
        db.fieldDao().insert(Field(fieldTypeId = fieldTypeId, deviceId = deviceId, value = value))
    }

    // üî∏ –û–ë–ù–û–í–õ–ï–ù–ò–ï
    fun updateSite(site: Site) = viewModelScope.launch {
        db.siteDao().update(site)
    }

    fun updateLocation(location: Location) = viewModelScope.launch {
        db.locationDao().update(location)
    }

    fun updateVendor(vendor: Vendor) = viewModelScope.launch {
        db.vendorDao().update(vendor)
    }

    fun updateDeviceType(type: DeviceType) = viewModelScope.launch {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        val oldType = deviceTypes.value.find { it.id == type.id }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        db.deviceTypeDao().update(type)
        
        // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –∏–∑–º–µ–Ω–∏–ª—Å—è, —É–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Ç–∏–ø–µ
        if (oldType != null && oldType.fieldTypeIdList != type.fieldTypeIdList) {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            val devicesOfType = devices.value.filter { device ->
                val model = deviceModels.value.find { it.id == device.modelId }
                model?.deviceTypeId == type.id
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è —ç—Ç–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            val fieldsToCheck = fields.value.filter { field ->
                devicesOfType.any { it.id == field.deviceId }
            }
            
            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Ç–∏–ø–µ
            fieldsToCheck.forEach { field ->
                if (!type.fieldTypeIdList.contains(field.fieldTypeId)) {
                    db.fieldDao().delete(field)
                }
            }
        }
    }

    fun updateDeviceModel(model: DeviceModel) = viewModelScope.launch {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        val oldModel = deviceModels.value.find { it.id == model.id }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        db.deviceModelDao().update(model)
        
        // –ï—Å–ª–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è, —É–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–æ–≤–æ–º —Ç–∏–ø–µ
        if (oldModel != null && oldModel.deviceTypeId != model.deviceTypeId) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            val deviceType = deviceTypes.value.find { it.id == model.deviceTypeId }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            val devicesOfModel = devices.value.filter { it.modelId == model.id }
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ª—è —ç—Ç–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            val fieldsToCheck = fields.value.filter { field ->
                devicesOfModel.any { it.id == field.deviceId }
            }
            
            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Ç–∏–ø–µ
            if (deviceType != null) {
                fieldsToCheck.forEach { field ->
                    if (!deviceType.fieldTypeIdList.contains(field.fieldTypeId)) {
                        db.fieldDao().delete(field)
                    }
                }
            }
        }
    }

    fun updateRack(rack: Rack) = viewModelScope.launch {
        db.rackDao().update(rack)
    }

    fun updateFieldType(fieldType: FieldType) = viewModelScope.launch {
        db.fieldTypeDao().update(fieldType)
    }

    fun updateDevice(device: Device) = viewModelScope.launch {
        db.deviceDao().update(device)
    }

    fun updateField(field: Field) = viewModelScope.launch {
        db.fieldDao().update(field)
    }

    // üî∏ –£–î–ê–õ–ï–ù–ò–ï
    fun deleteSite(site: Site) = viewModelScope.launch {
        db.siteDao().delete(site)
    }

    fun deleteLocation(location: Location) = viewModelScope.launch {
        db.locationDao().delete(location)
    }

    fun deleteVendor(vendor: Vendor) = viewModelScope.launch {
        db.vendorDao().delete(vendor)
    }

    fun deleteDeviceType(type: DeviceType) = viewModelScope.launch {
        db.deviceTypeDao().delete(type)
    }

    fun deleteDeviceModel(model: DeviceModel) = viewModelScope.launch {
        db.deviceModelDao().delete(model)
    }

    fun deleteRack(rack: Rack) = viewModelScope.launch {
        db.rackDao().delete(rack)
    }

    fun deleteFieldType(fieldType: FieldType) = viewModelScope.launch {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        val fieldsOfType = fields.value.filter { it.fieldTypeId == fieldType.id }
        fieldsOfType.forEach { field ->
            db.fieldDao().delete(field)
        }
        
        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º —Ç–∏–ø –ø–æ–ª—è
        db.fieldTypeDao().delete(fieldType)
    }

    fun deleteDevice(device: Device) = viewModelScope.launch {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        val deviceFields = fields.value.filter { it.deviceId == device.id }
        deviceFields.forEach { field ->
            db.fieldDao().delete(field)
        }
        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        db.deviceDao().delete(device)
    }

    fun deleteField(field: Field) = viewModelScope.launch {
        db.fieldDao().delete(field)
    }

    // üî∏ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø

    fun getLocationsBySite(siteId: Int): Flow<List<Location>> {
        return db.locationDao().getBySite(siteId)
    }

    fun getDeviceModelsByVendorAndType(vendorId: Int, typeId: Int): Flow<List<DeviceModel>> {
        return db.deviceModelDao().getByVendorAndType(vendorId, typeId)
    }

    fun getRacksByLocation(locationId: Int): Flow<List<Rack>> {
        return db.rackDao().getByLocation(locationId)
    }

    fun getFieldsByDevice(deviceId: Int): Flow<List<Field>> {
        return db.fieldDao().getByDevice(deviceId)
    }
}

